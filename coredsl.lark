start: (include)* _isa+

include: "import" "\"" FILENAME "\""

FILENAME: NAME "." NAME

_isa: instruction_set | core_def


instruction_set: "InstructionSet" ID [extension] "{" [constants] [address_spaces] [registers] [functions] [instructions] "}"
?extension: "extends" ID

constants: "constants" "{" _separated{constant_decl, ","} "}"
constant_decl: ID [":=" natural]

address_spaces: "address_spaces" "{" _separated{address_space, ","} "}"
address_space: ID "[" (ID | natural) "," (ID | natural) ["**" (ID | natural)] "]" [space_attributes]
space_attributes: "(" _separated{SPACE_ATTRIBUTE, ","} ")"


registers: "registers" "{" _separated{_register_types, ","} "}"
_register_types : register | register_alias | register_file | register_mapping | register_bit
register: ID "[" (natural | ID) "]" [reg_attributes]
register_file: range_spec ID "[" (natural | ID) "]" [reg_attributes]
register_alias: "alias" ID "[" (natural | ID) "]" "is" ID (("[" natural "]") | range_spec) [reg_attributes]
register_mapping : "map" ID "[" (natural | ID) "]" "to" ID range_spec [reg_attributes]
register_bit : "bit" ID "is" ID range_spec [reg_attributes]
reg_attributes: "(" _separated{REG_ATTRIBUTE, ","} ")"

range_spec: "[" natural ":" natural "]"


core_def: "Core" ID [contributing_types] "{" [template] [constant_defs] [address_spaces] [registers] [register_defaults] [functions] [instructions] "}"

contributing_types: "provides" _separated{ID, ","}
template: "template" ":" ID ";"
constant_defs: "constants" "{" constant_def+ "}"
constant_def: ID ":=" natural [const_attributes] ";"
const_attributes: "(" _separated{CONST_ATTRIBUTE, ","} ")"

register_defaults: "reg_init" "{" register_default+ "}"
register_default: ID ":=" (natural | ID) ";"

functions: "functions" "{" function_def+ "}"
function_def: ["[" (natural | ID) "]"] ID "(" fn_args_def ")" ["'"? DATA_TYPE] [fn_attributes] "{" [operation] "}"
fn_attributes: "(" _separated{FN_ATTRIBUTE, ","} ")"
fn_args_def: _separated{fn_arg_def, ","}
fn_arg_def: ID ["'"? DATA_TYPE] "[" (natural | ID) "]"

instructions: "instructions" "{" instruction+ "}"
instruction: ID [instr_attributes] "{" ["encoding" ":" encoding ";"] ["args_disass" ":" TEXT ";"] [operation] "}"
instr_attributes: "(" _separated{INSTR_ATTRIBUTE, ","} ")"
encoding: _separated{field, "|"}
?field: BVAL | bit_field
bit_value: BVAL
bit_field: ID range_spec ["'"? DATA_TYPE]

operation: statement+
?statement: assignment | conditional | direct_code | procedure | return_

return_: "return" expression ";"

?assignment: (indexed_reference | | named_reference | scalar_definition) "<=" expression ";"

bit_size_spec: "{" (natural | ID) "}"

indexed_reference: ID "[" expression "]" [bit_size_spec]
named_reference: ID [bit_size_spec]
scalar_definition: "val" ID ["'"? DATA_TYPE] "[" (natural | ID) "]"

conditional: "if" "(" boolean_or_expr ")" stmt_single_or_block ["else" stmt_single_or_block]

?stmt_single_or_block: stmt_list_single | ("{" stmt_list_mult "}")

stmt_list_single: statement -> stmt_list
stmt_list_mult: statement+ -> stmt_list

direct_code: "C++" "{" TEXT+ "}"

procedure: PROCEDURENAME "(" [fn_args] ")" ";"

fn_args: _separated{expression, ","}


?expression: boolean_or_expr

?boolean_or_expr: boolean_and_expr | boolean_or_expr BOOL_OR_OP boolean_and_expr -> two_op_expr
?boolean_and_expr: bit_or_expr | boolean_and_expr BOOL_AND_OP bit_or_expr -> two_op_expr
?bit_or_expr: bit_xor_expr | bit_or_expr BIT_OR_OP bit_xor_expr -> two_op_expr
?bit_xor_expr: bit_and_expr | bit_xor_expr BIT_XOR_OP bit_and_expr -> two_op_expr
?bit_and_expr: equality_expr | bit_and_expr BIT_AND_OP equality_expr -> two_op_expr
?equality_expr: comparison_expr | equality_expr EQ_OP comparison_expr -> two_op_expr
?comparison_expr: shift_expr | comparison_expr COMP_OP shift_expr -> two_op_expr
?shift_expr: addition_expr | shift_expr SHIFT_OP addition_expr -> two_op_expr
?addition_expr: mult_expr | addition_expr ADD_OP mult_expr -> two_op_expr
?mult_expr: unitary_expr | mult_expr MULT_OP unitary_expr -> two_op_expr
?unitary_expr: type_conv | UNITARY_OP unitary_expr
?type_conv: primary | primary "'"? DATA_TYPE
?primary: parens | function | number_literal | indexed_reference | named_reference
parens: "(" expression ")"

number_literal: natural
function: FUNCTIONNAME "(" [fn_args] ")"

BOOL_OR_OP: "||"
BOOL_AND_OP: "&&"

BIT_OR_OP: "|"
BIT_XOR_OP: "^"
BIT_AND_OP: "&"

EQ_OP: "==" | "!="
COMP_OP: ">=" | "<=" | ">" | "<"
SHIFT_OP: "<<" | ">>"
ADD_OP: "+" | "-"
MULT_OP: "*" | "/" | "%"
UNITARY_OP: "-" | "+" | "~" | "!"


BVAL: /b[01]+/
DATA_TYPE: /[usfdqb]/

REG_ATTRIBUTE: "is_pc" | "delete"
SPACE_ATTRIBUTE: "main_mem"
CONST_ATTRIBUTE: "is_reg_width" | "is_addr_width"
INSTR_ATTRIBUTE: "no_cont" | "cond" | "flush"
FN_ATTRIBUTE: "static"

PROCEDURENAME: ID //"raise" | "leave" | "wait" | /dispatch_([a-z]|[A-Z]|_)([a-z]|[A-Z]|[0-9]|_|\.)*/
FUNCTIONNAME: ID //"sext" | "zext" | "choose" | "shll" | "shrl" | "shra" | /fdispatch_([a-z]|[A-Z]|_)([a-z]|[A-Z]|[0-9]|_|\.)*/

_separated{x, sep}: x (sep x)*

natural: BINARY | HEX | OCT | INT

BINARY: /(0b|0B)[01](_?[01])*/
HEX: /(0x|0X)([0-9]|[a-f]|[A-F])(_?([0-9]|[a-f]|[A-F]))*/
OCT: /0[0-7](_?[0-7])*/

COMMENT: /\/\/.*/
ML_COMMENT: "/*" /(.|\n)+/ "*/"
TEXT: /"[^";]+"/

ID: "^"? ("a".."z"|"A".."Z"|"_") ("a".."z"|"A".."Z"|"_"|"0".."9"|".")*

%import common.CNAME -> NAME
%import common.NUMBER
%import common.INT
%import common.WS

%ignore WS
%ignore COMMENT
%ignore ML_COMMENT