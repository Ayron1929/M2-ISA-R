import "RV64IC.core_desc"

InstructionSet RV128IC extends RV64IC {
    instructions {
        C.SRLI {//(RV128)
            encoding:b100 | shamt[5:5] | b00 | rs1[2:0] | shamt[4:0] | b01;
            args_disass: "{name(8+rs1)}, {shamt}";
            val rs1_idx[5] <= rs1+8;
            X[rs1_idx] <= shrl(X[rs1_idx], shamt);
        }
        C.SRAI {//(RV128)
            encoding:b100 | shamt[5:5] | b01 | rs1[2:0] | shamt[4:0] | b01;
            args_disass: "{name(8+rs1)}, {shamt}";
            val rs1_idx[5] <= rs1+8;
            X[rs1_idx] <= shra(X[rs1_idx], shamt);
        }
        C.SLLI {//(RV128)
            encoding:b000 | shamt[5:5] | rs1[4:0] | shamt[4:0] | b10;
            args_disass: "{name(rs1)}, {shamt}";
            if(rs1 == 0) raise(0, 2);
            X[rs1] <= shll(X[rs1], shamt);
        }
        C.LQ { //(RV128)
             encoding:b001 | uimm[5:4] | uimm[8:8] | rs1[2:0] | uimm[7:6] | rd[2:0] | b00;
        }
        C.SQ { //(RV128) 
            encoding:b101 | uimm[5:4] | uimm[8:8] | rs1[2:0] | uimm[7:6] | rs2[2:0] | b00;
        }
        C.SQSP {//(RV128)
            encoding:b101 | uimm[5:4] | uimm[9:6] | rs2[4:0] | b10;
        }
    }
}