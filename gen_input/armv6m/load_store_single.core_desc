import "base.core_desc"

InstructionSet ARMv6M_Load_Store_Single extends ARMv6M_Base {
    instructions {
        STR_reg_T1 {
            encoding: b01010000 | m[2:0] | n[2:0] | t[2:0];
            args_disass: "{name(t)}, [{name(n)}, {name(m)}]";
            val address[32] <= R[n] + R[m];
            MEM[address]{32} <= R[t];
        }

        STRH_reg_T1 {
            encoding: b0101001 | m[2:0] | n[2:0] | t[2:0];
            args_disass: "{name(t)}, [{name(n)}, {name(m)}]";
            val address[32] <= R[n] + R[m];
            MEM[address]{16} <= R[t];
        }

        // STRB_reg_T1

        LDRSB_reg_T1 {
            encoding: b01010011 | m[2:0] | n[2:0] | t[2:0];
            args_disass: "{name(t)}, [{name(n)}, {name(m)}]";
            val address[32] <= R[n] + R[m];
            R[t] <= sext(MEM[address]{8});
        }

        LDR_reg_T1 {
            encoding: b01010100 | m[2:0] | n[2:0] | t[2:0];
            args_disass: "{name(t)}, [{name(n)}, {name(m)}]";
            val address[32] <= R[n] + R[m];
            R[t] <= MEM[address]{32};
        }

        // LDRH_reg_T1
        // LDRB_reg_T1
        // LDRSH_reg_T1
        // STR_imm_T1
        // LDR_imm_T1
        // STRB_imm_T1
        // LDRB_imm_T1
        // STRH_imm_T1
        // LDRH_imm_T1
        // STR_imm_T2
        // LDR_imm_T2
        // LDR_lit_T1
    }
}