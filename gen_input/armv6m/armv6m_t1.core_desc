import "armv6m_base.core_desc"

InstructionSet ARMv6M_T1 extends ARMv6M_Base{
	instructions {


		ADD_sp_imm_T1 {
			encoding: b10101 | d[2:0] | imm8[7:0];
			args_disass: "{name(d)}, SP, #imm8";
			R[d] <= add_with_carry(SP, imm8 << 2, 0, 0);
		}

		ADD_sp_reg_T1 {
			encoding: b01000100 | dm[3:3] | b1101 | dm[2:0];
			args_disass: "{name(dm)}, SP, {name(dm)}";
			R[dm] <= add_with_carry(SP, R[dm], 0, 0);
		}

		ADR_T1 (no_cont, cond) {
			encoding: b10100 | d[2:0] | imm8[7:0];
			args_disass: "{name(d)}, PC, #imm8";
			R[d] <= (PC & 0xfffffffc) + imm8 << 2;
		}

		BEQ_T1 (no_cont, cond) {
			encoding: b1101 | b0000 | imm8[7:0];
			args_disass: "imm8";
			PC <= choose(Z == 1, PC + imm8 << 1 + 4, PC + 2);
		}

		BNE_T1 (no_cont, cond) {
			encoding: b1101 | b0001 | imm8[7:0];
			args_disass: "imm8";
			PC <= choose(Z == 0, PC + imm8 << 1 + 4, PC + 2);
		}

		BCS_T1 (no_cont, cond) {
			encoding: b1101 | b0010 | imm8[7:0];
			args_disass: "imm8";
			PC <= choose(C == 1, PC + imm8 << 1 + 4, PC + 2);
		}

		BCC_T1 (no_cont, cond) {
			encoding: b1101 | b0011 | imm8[7:0];
			args_disass: "imm8";
			PC <= choose(C == 0, PC + imm8 << 1 + 4, PC + 2);
		}

		BMI_T1 (no_cont, cond) {
			encoding: b1101 | b0100 | imm8[7:0];
			args_disass: "imm8";
			PC <= choose(N == 1, PC + imm8 << 1 + 4, PC + 2);
		}

		BPL_T1 (no_cont, cond) {
			encoding: b1101 | b0101 | imm8[7:0];
			args_disass: "imm8";
			PC <= choose(N == 0, PC + imm8 << 1 + 4, PC + 2);
		}

		BVS_T1 (no_cont, cond) {
			encoding: b1101 | b0110 | imm8[7:0];
			args_disass: "imm8";
			PC <= choose(V == 1, PC + imm8 << 1 + 4, PC + 2);
		}

		BVC_T1 (no_cont, cond) {
			encoding: b1101 | b0111 | imm8[7:0];
			args_disass: "imm8";
			PC <= choose(V == 0, PC + imm8 << 1 + 4, PC + 2);
		}

		BHI_T1 (no_cont, cond) {
			encoding: b1101 | b1000 | imm8[7:0];
			args_disass: "imm8";
			PC <= choose(C == 1 && Z == 0, PC + imm8 << 1 + 4, PC + 2);
		}

		BLS_T1 (no_cont, cond) {
			encoding: b1101 | b1001 | imm8[7:0];
			args_disass: "imm8";
			PC <= choose(C == 0 || Z == 1, PC + imm8 << 1 + 4, PC + 2);
		}

		BGE_T1 (no_cont, cond) {
			encoding: b1101 | b1010 | imm8[7:0];
			args_disass: "imm8";
			PC <= choose(N == V, PC + imm8 << 1 + 4, PC + 2);
		}

		BLT_T1 (no_cont, cond) {
			encoding: b1101 | b1011 | imm8[7:0];
			args_disass: "imm8";
			PC <= choose(N != V, PC + imm8 << 1 + 4, PC + 2);
		}

		BGT_T1 (no_cont, cond) {
			encoding: b1101 | b1100 | imm8[7:0];
			args_disass: "imm8";
			PC <= choose(Z == 0 && N == V, PC + imm8 << 1 + 4, PC + 2);
		}

		BLE_T1 (no_cont, cond) {
			encoding: b1101 | b1101 | imm8[7:0];
			args_disass: "imm8";
			PC <= choose(Z == 1 || N != V, PC + imm8 << 1 + 4, PC + 2);
		}

		BAL_T1 (no_cont) {
			encoding: b1101 | b1110 | imm8[7:0]'s;
			args_disass: "imm8";
			PC <= PC + imm8 << 1 + 4;
		}
	}
}