import "RV32IC.core_desc"

InstructionSet RV64IC extends RV32IC {
    instructions {
        C.LD {//(RV64/128) 
            encoding:b011 | uimm[5:3] | rs1[2:0] | uimm[7:6] | rd[2:0] | b00;
            args_disass: "{name(8+rd)}, {uimm},({name(8+rs1)})";
            val offs[XLEN] <= X[rs1+8] + uimm;
            X[rd+8]<=sext(MEM[offs]{64});
        }
        C.SD { //(RV64/128) 
            encoding:b111 | uimm[5:3] | rs1[2:0] | uimm[7:6] | rs2[2:0] | b00;
            args_disass: "{name(8+rs2)}, {uimm},({name(8+rs1)})";
            val offs[XLEN] <= X[rs1+8] + uimm;
            MEM[offs]{64} <= X[rs2+8];
        }
        C.SUBW {//(RV64/128, RV32 res)
            encoding:b100 | b1 | b11 | rd[2:0] | b00 | rs2[2:0] | b01;
            args_disass: "{name(8+rd)}, {name(8+rd)}, {name(8+rs2)}";
            val res[32] <= X[rd+8]{32} - X[rs2+8]{32};
            X[rd+8] <= sext(res);
        }
        C.ADDW {//(RV64/128 RV32 res)
            encoding:b100 | b1 | b11 | rd[2:0] | b01 | rs2[2:0] | b01;
            args_disass: "{name(8+rd)}, {name(8+rd)}, {name(8+rs2)}";   
            val res[32] <= X[rd+8]{32} + X[rs2+8]{32};
            X[rd+8] <= sext(res);
        }
        C.ADDIW {//(RV64/128)
            encoding:b001 | imm[5:5]s | rs1[4:0] | imm[4:0]s | b01;
            args_disass: "{name(rs1)}, {imm:#05x}";
            if(rs1 != 0){
                val res[32] <= X[rs1]{32}'s + imm;
                X[rs1] <= sext(res);
            } 
        }
        C.SRLI {//(RV64)
            encoding:b100 | shamt[5:5] | b00 | rs1[2:0] | shamt[4:0] | b01;
            args_disass: "{name(8+rs1)}, {shamt}";
            val rs1_idx[5] <= rs1+8;
            X[rs1_idx] <= shrl(X[rs1_idx], shamt);
        }
        C.SRAI {//(RV64)
            encoding:b100 | shamt[5:5] | b01 | rs1[2:0] | shamt[4:0] | b01;
            args_disass: "{name(8+rs1)}, {shamt}";
            val rs1_idx[5] <= rs1+8;
            X[rs1_idx] <= shra(X[rs1_idx], shamt);
        }
        C.SLLI {//(RV64)
            encoding:b000 | shamt[5:5] | rs1[4:0] | shamt[4:0] | b10;
            args_disass: "{name(rs1)}, {shamt}";
            if(rs1 == 0) raise(0, 2);
            X[rs1] <= shll(X[rs1], shamt);
        }
        C.LDSP {//(RV64/128
            encoding:b011 | uimm[5:5] | rd[4:0] | uimm[4:3] | uimm[8:6] | b10;
            args_disass:"{name(rd)}, {uimm}(sp)";
            val offs[XLEN] <= X[2] + uimm;
            if(rd!=0) X[rd]<=sext(MEM[offs]{64});
        }
        C.SDSP {//(RV64/128)
            encoding:b111 | uimm[5:3] | uimm[8:6] | rs2[4:0] | b10;
            args_disass:"{name(rs2)}, {uimm}(sp)";
            val offs[XLEN] <= X[2] + uimm;
            MEM[offs]{64} <= X[rs2];
        }
    }
}